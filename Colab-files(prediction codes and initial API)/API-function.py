# -*- coding: utf-8 -*-
"""optum1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I3MjHZYZwUbP-CxGwKfpcqwedLNROAsy
"""

import pickle
from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
import numpy as np
import pandas as pd

#Function for predicting healthcare cost

def predict_cost(model,dicti):
  di={'AGE': 0,'LAT': 0,'LON': 0,'ethnicity_hispanic': 0.0,'ethnicity_nonhispanic': 0.0,'gender_F': 0.0,'gender_M': 0.0,'marital_M': 0.0,'marital_S': 0.0,'race_asian': 0.0,
 'race_native': 0.0,'race_white': 0.0,'reasoncode_10509002.0': 0.0,
 'reasoncode_233678006.0': 1.0,
 'reasoncode_239872002.0': 0.0,
 'reasoncode_24079001.0': 0.0,
 'reasoncode_254837009.0': 0.0,
 'reasoncode_301011002.0': 0.0,
 'reasoncode_38822007.0': 0.0,
 'reasoncode_43878008.0': 0.0,
 'reasoncode_44054006.0': 0.0,
 'reasoncode_444814009.0': 0.0,
 'reasoncode_55822004.0': 0.0,
 'reasoncode_59621000.0': 0.0,
 'reasoncode_75498004.0': 0.0}
  #df=pd.DataFrame(di)
  di['AGE']=float(dicti['AGE'])
  di['LAT']=float(dicti['LAT'])
  di['LON']=float(dicti['LON'])
  di['ethnicity_'+dicti['ethnicity']]=1.0
  di['gender_'+dicti['gender']]=1.0
  di['marital_'+dicti['marital']]=1.0
  di['race_'+dicti['race']]=1.0
  di['reasoncode_'+dicti['reasoncode']+'.0']=1.0
  return model.predict(pd.DataFrame(di,index=[0]))[0]

#Function for predicting best care plan

def predict_careplan(model,dicti):
  di={'AGE': 0,'LAT': 0,'LON': 0,'ethnicity_hispanic': 0.0,'ethnicity_nonhispanic': 0.0,'gender_F': 0.0,'gender_M': 0.0,'marital_M': 0.0,'marital_S': 0.0,'race_asian': 0.0,
 'race_black': 0.0,'race_native': 0.0,'race_other': 0.0,'race_white': 0.0,'reasoncode_10509002.0': 0.0,
 'reasoncode_109838007.0': 0.0,
 'reasoncode_110030002.0': 0.0,
 'reasoncode_126906006.0': 0.0,
 'reasoncode_15724005.0': 0.0,
 'reasoncode_15777000.0': 0.0,
 'reasoncode_16114001.0': 0.0,
 'reasoncode_185086009.0': 0.0,
 'reasoncode_192127007.0': 0.0,
 'reasoncode_201834006.0': 0.0,
 'reasoncode_230265002.0': 0.0,
 'reasoncode_233678006.0': 0.0,
 'reasoncode_239720000.0': 0.0,
 'reasoncode_239872002.0': 0.0,
 'reasoncode_239873007.0': 0.0,
 'reasoncode_24079001.0': 0.0,
 'reasoncode_262574004.0': 0.0,
 'reasoncode_263102004.0': 0.0,
 'reasoncode_26929004.0': 0.0,
 'reasoncode_283371005.0': 0.0,
 'reasoncode_283385000.0': 0.0,
 'reasoncode_284549007.0': 0.0,
 'reasoncode_284551006.0': 0.0,
 'reasoncode_301011002.0': 0.0,
 'reasoncode_307731004.0': 0.0,
 'reasoncode_30832001.0': 0.0,
 'reasoncode_33737001.0': 0.0,
 'reasoncode_359817006.0': 0.0,
 'reasoncode_363406005.0': 0.0,
 'reasoncode_36923009.0': 0.0,
 'reasoncode_370143000.0': 0.0,
 'reasoncode_370247008.0': 0.0,
 'reasoncode_38822007.0': 0.0,
 'reasoncode_39848009.0': 0.0,
 'reasoncode_40275004.0': 0.0,
 'reasoncode_403190006.0': 0.0,
 'reasoncode_403191005.0': 0.0,
 'reasoncode_424132000.0': 0.0,
 'reasoncode_44054006.0': 0.0,
 'reasoncode_444448004.0': 0.0,
 'reasoncode_444470001.0': 0.0,
 'reasoncode_44465007.0': 0.0,
 'reasoncode_449868002.0': 0.0,
 'reasoncode_45816000.0': 0.0,
 'reasoncode_47505003.0': 0.0,
 'reasoncode_55680006.0': 0.0,
 'reasoncode_55822004.0': 0.0,
 'reasoncode_58150001.0': 0.0,
 'reasoncode_59621000.0': 0.0,
 'reasoncode_62106007.0': 0.0,
 'reasoncode_62564004.0': 0.0,
 'reasoncode_65966004.0': 0.0,
 'reasoncode_67811000119102.0': 0.0,
 'reasoncode_69896004.0': 0.0,
 'reasoncode_70704007.0': 0.0,
 'reasoncode_72892002.0': 0.0,
 'reasoncode_87433001.0': 0.0,
 'reasoncode_88805009.0': 0.0,
 'reasoncode_90560007.0': 0.0,
 'reasoncode_93761005.0': 0.0,
 'reasoncode_94260004.0': 0.0,
 'reasoncode_95417003.0': 0.0}
  di['AGE']=dicti['AGE']
  di['LAT']=dicti['LAT']
  di['LON']=dicti['LON']
  di['ethnicity_'+dicti['ethnicity']]=1.0
  di['gender_'+dicti['gender']]=1.0
  di['marital_'+dicti['marital']]=1.0
  di['race_'+dicti['race']]=1.0
  di['reasoncode_'+dicti['reasoncode']+'.0']=1.0
  d=[*di]
  print(d)
  return di
  #return model.predict(pd.DataFrame(di,index=[0]))[0]

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

# %matplotlib inline
from sklearn.linear_model import LinearRegression,LassoCV, Ridge, LassoLarsCV,ElasticNetCV
from sklearn.model_selection import GridSearchCV, cross_val_score, learning_curve
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, ExtraTreesRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler, Normalizer, RobustScaler
import xgboost as xgb
import lightgbm as lgb
import pandas as pd
import numpy as np
import matplotlib as plt
from sklearn.model_selection import train_test_split 
from xgboost import plot_importance
import xgboost
from sklearn.metrics import mean_squared_error as MSE 
from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix

pickle_off = open("predict2.pkl","rb")
model = pickle.load(pickle_off)
predict_cost(model,di)

pickle_off = open("predict2.pkl","rb")
model = pickle.load(pickle_off)
predict_cost(model,di)



di={'AGE': '30.819178',
'LAT': '42.008134',
 'LON': '-72.60884222581656',
 'ethnicity': 'hispanic',
 'gender': 'M',
 'marital': 'M',
 'race': 'white',
 'reasoncode': '10509002',
 }

di1={'AGE': '30.81917808219178',
 'LAT': '42.008134351443012',
 'LON': '-72.21805845308168',
 'ethnicity':'hispanic',
 'gender': 'M',
 'marital': 'M',
 'race': 'native',
 'reasoncode': '72892002',
}

di1